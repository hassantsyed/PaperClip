import 'dotenv/config';
import { app, BrowserWindow, ipcMain, session } from 'electron';
import path from 'path';
import { db } from './main/db';
import { processUrl } from './main/events';

// Import processors to register their event listeners
import './main/handlers/URLHandler';
import './main/handlers/PDFHandler';

// These are auto-generated by Electron Forge Webpack
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Squirrel setup for Windows
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Example IPC handlers
ipcMain.handle('db:get', async (_, collection: string) => {
  return db.get(collection);
});

ipcMain.handle('db:set', async (_, collection: string, data: any) => {
  return db.set(collection, data);
});

ipcMain.on('resource:process', (event, url: string, id: string) => {
  processUrl(url, id, event.sender);
});

function createWindow(): void {
  // Create the browser window with minimal security
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      // Preload script
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,

      // **** The lines below are what allow local file:// loads ****
      webSecurity: false,               // Disables same-origin policy, etc.
      // @ts-ignore
      allowFileAccessFromFileURLs: true // Lets file:// URLs be loaded in the renderer
    },
  });

  // Load the React/webpack app
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open DevTools (optional)
  mainWindow.webContents.openDevTools();
}

app.whenReady().then(() => {
  // Intercept and modify headers to allow file:// and other insecure sources
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    // Overwrite or remove CSP altogether:
    // "default-src * 'unsafe-inline' 'unsafe-eval' data: blob: file:"
    // is extremely permissive and allows local resources, inline scripts, etc.
    callback({
      cancel: false,
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          "default-src * 'unsafe-inline' 'unsafe-eval' data: blob: file:"
        ],
      },
    });
  });

  createWindow();
});

// Quit when all windows are closed
app.on('window-all-closed', () => {
  // Typical macOS behavior
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// macOS: re-create window if dock icon clicked and no other windows are open
app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
